// Taken from suitcss
// github.com/suitcss/utils-flex

// Applies to flex container

// Container

@mixin flex {
  display: flex !important;

  // Set the flex-shrink default explicitly to fix IE10 - http://git.io/vllC7
  & > * {
    flex-shrink: 1;
  }
}

@mixin flex-inline {
  display: inline-flex !important;

  // Set the flex-shrink default explicitly to fix IE10 - http://git.io/vllC7
  & > * {
    flex-shrink: 1;
  }
}

// Direction: row

@mixin flex-row {
  flex-direction: row !important;
}

@mixin flex-row-reverse {
  flex-direction: row-reverse !important;
}

// Direction: column

@mixin flex-col {
  flex-direction: column !important;
}

@mixin flex-col-reverse {
  flex-direction: column-reverse !important;
}

// Wrap

@mixin flex-wrap {
  flex-wrap: wrap !important;
}

@mixin flex-no-wrap {
  flex-wrap: nowrap !important;
}

@mixin flex-wrap-reverse {
  flex-wrap: wrap-reverse !important;
}

// Align items along the main axis of the current line of the flex container

@mixin flex-justify-start {
  justify-content: flex-start !important;
}

@mixin flex-justify-end {
  justify-content: flex-end !important;
}

@mixin flex-justify-center {
  justify-content: center !important;
}

@mixin flex-justify-between {
  justify-content: space-between !important;
}

@mixin flex-justify-around {
  justify-content: space-around !important;
}

// Align items in the cross axis of the current line of the flex container
// Similar to `justify-content` but in the perpendicular direction

@mixin flex-align-items-start {
  align-items: flex-start !important;
}

@mixin flex-align-items-end {
  align-items: flex-end !important;
}

@mixin flex-align-items-center {
  align-items: center !important;
}

@mixin flex-align-items-stretch {
  align-items: stretch !important;
}

@mixin flex-align-items-baseline {
  align-items: baseline !important;
}

// Aligns items within the flex container
// when there is extra space in the cross-axis

// Has no effect when there is only one line of flex items.

@mixin flex-align-content-start {
  align-content: flex-start !important;
}

@mixin flex-align-content-end {
  align-content: flex-end !important;
}

@mixin flex-align-content-center {
  align-content: center !important;
}

@mixin flex-align-content-stretch {
  align-content: stretch !important;
}

@mixin flex-align-content-between {
  align-content: space-between !important;
}

@mixin flex-align-content-around {
  align-content: space-around !important;
}

// Applies to flex items

// Override default alignment of single item when specified by `align-items`

@mixin flex-align-self-start {
  align-self: flex-start !important;
}

@mixin flex-align-self-end {
  align-self: flex-end !important;
}

@mixin flex-align-self-center {
  align-self: center !important;
}

@mixin flex-align-self-stretch {
  align-self: stretch !important;
}

@mixin flex-align-self-baseline {
  align-self: baseline !important;
}

@mixin flex-align-self-auto {
  align-self: auto !important;
}

// Change order without editing underlying HTML

@mixin flex-order-first {
  order: -1 !important;
}

@mixin flex-order-last {
  order: 1 !important;
}

@mixin flex-order-none {
  order: 0 !important;
}

// Specify the flex grow factor, which determines how much the flex item will
// grow relative to the rest of the flex items in the flex container.

// 1. Provide all values to avoid IE10 bug with shorthand flex - http://git.io/vllC7
//    Use `0%` to avoid bug in IE10/11 with unitless flex basis - http://git.io/vllWx

// usage: @include flex-grow(1)

@mixin flex-grow($value) {
  flex: $value 1 0% !important; /* 1 */
}

// Aligning with `auto` margins - http://www.w3.org/TR/css-flexbox-1/#auto-margins

@mixin flex-expand-left {
  margin-left: auto !important;
}

@mixin flex-expand-right {
  margin-right: auto !important;
}
